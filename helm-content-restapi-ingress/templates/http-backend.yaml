---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.deployment.name }}-http"
  labels:
    app: "{{ .Values.deployment.name }}"
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: "{{ .Values.deployment.name }}-http"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.deployment.name }}-http"
  labels:
    app: "{{ .Values.deployment.name }}"
spec:
  replicas: {{ .Values.content.replicas }}
  selector:
    matchLabels:
      app: "{{ .Values.deployment.name }}-http"
  template:
    metadata:
      labels:
        app: "{{ .Values.deployment.name }}-http"
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "{{ .Values.deployment.name }}-pvc"
#          emptyDir: {}
      initContainers:
        # Init data
        - name: init-content
          image: "{{ .Values.content.image.repository }}:{{ .Values.content.image.tag }}"
          imagePullPolicy: {{ .Values.content.image.pullPolicy }}
          command: ["rsync", "-rDvh", "/content/", "/target/"]
          volumeMounts:
            - name: data
              mountPath: "/target/"
      containers:
        - image: spaship/httpd
          imagePullPolicy: IfNotPresent
          name: spaship
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: data
              mountPath: "/var/www/html"
